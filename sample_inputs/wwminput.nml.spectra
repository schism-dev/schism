! This is the main input for WWM (based on limon)
! Other mandatory inputs: wwmbnd.gr3 (boundary flag files; see below)
! Depending on the choices of parameters below you may need additional inputs

!Notes on hotstart: (1) generate hotstart outputs from WWM; see &HOTFILE section. Turn on LHOTF and 
! match interval (see &HOTFILE) with SCHISM's so the 2 models can be hotstarted together. Use single nc output
! with last 2 records. Also need to make sure the start/end time info is correct 
! in &PROC, &HOTFILE; (2) to restart both models, copy the hot out to input (e.g. hotfile_in_WWM.nc),
! turn on &INIT->LHOTR and input hot input name there. IHOTPOS_IN controls position of the 2 time records.
! Then do the usual things in SCHISM (ihot>0).

&PROC
 PROCNAME       = 'limon'            ! Project Name
 DIMMODE        = 2                  ! Mode of run (ex: 1 = 1D, 2 = 2D) always 2D when coupled to SELFE
 LSTEA          = F                  ! steady mode; under development
 LQSTEA         = F                  ! Quasi-Steady Mode; In this case WWM-II is doing subiterations defined as DELTC/NQSITER unless QSCONVI is not reached
 LSPHE          = F                  ! Spherical coordinates
 LNAUTIN        = T                  ! Nautical convention for all inputs given in degrees (suggestion: T)
                                     ! If T, 0 is _from_ north, 90 is from east etc;
                                     ! If F, maths. convention - 0: to east; 90: going to north
 LMONO_IN       = F
 LMONO_OUT      = F
 LNAUTOUT       = T                  ! Nautical output of all quantities in degrees
 BEGTC          = '19980901.000000'  ! Time for start the simulation, ex:yyyymmdd. hhmmss
 DELTC          = 5                 ! Time step (MUST match dt*nstep_wwm in SCHISM!)
 UNITC          = 'SEC'              ! Unity of time step
 ENDTC          = '19980901.060000'  ! Time for stop the simulation, ex:yyyymmdd. hhmmss
 DMIN           = 0.01              ! Minimum water depth. Use 'h0' as in SCHISM
/

&COUPL
 LCPL           = T                  ! Couple with current model ... main switch - keep it on
 LROMS          = F                  ! ROMS (set as F)
 LTIMOR         = F                  ! TIMOR (set as F)
 LSHYFEM        = F                  ! SHYFEM (set as F)
 RADFLAG        = 'LON'
 LETOT          = F                  ! Option to compute the wave induced radiation stress. If .T. the radiation stress is based on the integrated wave spectrum
                                     ! e.g. Etot = Int,0,inf;Int,0,2*pi[N(sigma,theta)]dsigma,dtheta. If .F. the radiation stress is estimated as given in Roland et al. (2008) based
                                     ! on the directional spectra itself. It is always desirable to use .F., since otherwise the spectral informations are truncated and therefore
                                     ! LETOT = .T., is only for testing and developers!
 NLVT           = 10                 ! Number of vertical Layers; not used with SELFE
 DTCOUP         = 600.               ! Couple time step - not used when coupled to SELFE
/

&GRID
 LCIRD          = T                  ! Full circle in directional space
 LSTAG          = T                  ! Stagger directional bins with a half Dtheta; may use T only for regular grid to avoid char. line aligning with grid line
 MINDIR         = 0.                 ! Minimum direction for simulation (unit: degrees; nautical convention; 0: from N; 90: from E); not used if LCIRD = .T.
 MAXDIR         = 360.               ! Maximum direction for simulation (unit: degrees); may be < MINDIR; not used if LCIRD = .T.
 MDC = 36                 ! Number of directional bins
 FRLOW          = 0.04               ! Low frequency limit of the discrete wave period (Hz; 1/period)
 FRHIGH         = 1.                 ! High frequency limit of the discrete wave period.
 MSC = 36                 ! Number of frequency bins
 IGRIDTYPE      = 3                  ! Gridtype used. 1 ~ XFN, 2 ~ WWM-PERIODIC, 3 ~ SELFE, 4 ~ OLD WWM GRID
 FILEGRID       = 'hgrid_WWM.gr3'        ! Name of the grid file. hgrid.gr3 or hgrid.ll if IGRIDTYPE = 3 (SELFE)
 LSLOP          = F                  ! Bottom Slope limiter (default=F)
 SLMAX          = 0.2                ! Max Slope;
 LVAR1D         = F                  ! For 1d-mode if variable dx is used; not used with SELFE
/

&INIT
 LHOTR          = F                  ! Use hotstart file. If T, the name is specified in &HOTFILE
 LINID          = F                  ! Initial condition; F for default; use T if using WW3 as i.c. etc
 INITSTYLE      = 1                  ! 1 - Parametric Jonswap, 2 - Read from Global NETCDF files, work only if IBOUNDFORMAT=3
/

&BOUC
 LBCSE          = F                  ! The wave boundary data is time dependent
 LBINTER        = F                  ! Do interpolation in time if LBCSE=T (not available for quasi-steady mode within the subtime steps)
 LBCWA          = T                  ! Parametric Wave Spectra
 LINHOM         = F                  ! Non-uniform wave b.c. in space
 LBCSP          = F                  ! Specify (non-parametric) wave spectra, specified in 'FILEWAVE' below
 LINDSPRDEG     = F                  ! If 1-d wave spectra are read this flag defines whether the input for the directional spreading is in degrees (true) or exponent (false)
 LPARMDIR       = F                  ! If LPARMDIR is true than directional spreading is read from WBDS and must be in exponential format at this time, only valid for 1d Spectra
 FILEWAVE       = 'wwmbnd.gr3'         ! Boundary file including discrete wave spectra
 LBSP1D         = F                  ! 1D (freq. space only) format for FILEWAVE if LBCSP=T and LINHOM=F
 LBSP2D         = F                  ! not functional (freq. + directional space)

 BEGTC          = '19980901.000000'  ! Begin time of the wave boundary file (FILEWAVE)
 DELTC          = 1                  ! Time step in FILEWAVE
 UNITC          = 'HR'               ! Unit
 ENDTC          = '19981002.000000'  ! End time
 FILEBOUND      = 'wwmbnd.gr3'       ! Boundary file defining boundary and Neumann nodes.
                                     ! Flag 0: not on bnd; 3: Neumann (0 gradient);
                                     ! 2: active bnd (Direchlet). Bnd flags imported from SELFE:
                                     ! 1: exterior bnd; -1: interior (islands)
 IBOUNDFORMAT   = 1                  ! 1 ~ WWM, 2 ~ FVCOM: 3 ~ WW3. FVCOM and WW3 works only with LBCWA=T.
                                     ! For WW3 boundary input also set LINHOM=T, LBCSE=T and this works only for spherical coordinates
                                     ! LMONO_IN = F ! incident wave is defined as monochromatic wave height, which is Hmono = sqrt(2) * Hs
                                     ! The following are needed only if LBCWA=T and LINHOM=F
 WBHS           = 4.                 ! Hs at the boundary for parametric spectra
 WBSS           = 2.                 ! 1 or -1: Pierson-Moskowitz, 2 or -2: JONSWAP, 3 or -3: all in one BIN,
                                     ! 4: Gauss. The sign decides whether WBTP below is
                                     ! peak (+) or mean period (-)
 WBTP           = 8.                 ! Tp at the boundary (sec); mean or peak depending on the sign of WBSS
 WBDM           = 90.0               ! Avg. Wave Direction at the boundary
 WBDSMS         = 1.                 ! Directional spreading value in degrees (1) or as exponent (2)
 WBDS           = 20.                 ! Directioanl spreading at the boundary (degrees/exponent)
 WBGAUSS        = 0.1                ! factor for gaussian distribution if WBSS=1
                                     ! End section for LBCWA=T and LINHOM=F
 WBPKEN         = 3.3                ! Peak enhancement factor for Jonswap Spectra if WBSS=2
 NCDF_HS_NAME   = 'hs'               ! NETCDF var. name for the significant wave height (normally it is just 'hs')
 NCDF_DIR_NAME  = 'dir'              ! NETCDF var. name for the mean wave direction (normally it is just 'dir')
 NCDF_SPR_NAME  = 'spr'              ! NETCDF var. name for the mean directional spreading (normally it is just 'spr')
 NCDF_FP_NAME   = 'fp'               ! NETCDF var. name for the peak freq. (normally it is just 'fp')
 NCDF_F02_NAME  = 't02'              ! NETCDF var. name for the zero down crossing freq. (normally it is just 't02')
/

&WIND
/

&CURR
/

&WALV
/


&ENGS !SOURCE TERMS
 MESNL          = 1                  ! SNL4; MESNL = 0 , MESNL = 1, (Discrete Interaction approx.)
 MESIN          = 1                  ! Wind input: Ardhuin etal (1), Cycle 4 (2), Makin & Stam (3); Babanin et al. (4), Cycle 3 (5), no wind (0) (default = 1; all others are just for rearch and explicitly not supported at all!!!)
 IFRIC          = 1                  ! Formulation for atmospheric boundary layer, (IFRIC = 1 for MESIN = 1, IFRIC = 4 for MESIN=3); only used if MESIN .GT. 2
 MESBF          = 1                  ! Bottomg friction: JONSWAP(1) (Default at 1); 2 - Madsen
 FRICC          = 0.067              ! Cjon - Bottom friction coefficient (always positive)
 MESBR          = 1                  ! Shallow water wave breaking; 0: no; 1: BJ78 (Default at 1)
 ICRIT          = 1                  ! Wave breaking criterion: set as 1 - SWAN, 2 - Dingemans - default = 2
 B_ALP          = 1.                 ! Dissipation proportionality coefficient (0.5 is default)
 BRCR           = 0.73               ! Wave breaking coefficient for Const. type wave breaking criterion; range: 0.6-0.83 (suggested 0.78)
 MEVEG          = 0
 LMAXETOT       = T                  ! Limit shallow water wave height by wave breaking limiter (default=T)
 MESDS          = 1                  ! Formulation for the whitecapping source function; usually same as MESIN
 MESTR          = 0                  ! Formulation for the triad 3 wave interactions (MESTR = 0 (off), MESTR = 1 (Lumped Triad Approx. (LTA) like SWAN) (Default at 1)
 TRICO          = 1.                 ! proportionality const. (\alpha_EB); default is 0.1
 TRIRA          = 2.5                ! ratio of max. freq. considered in triads over mean freq.; 2.5 is suggested
 TRIURS         = 0.1                ! critical Ursell number; if Ursell # < TRIURS; triads are not computed
/

 &SIN4                               ! Various coefficients of Ardhuin et al., 2009, 2010, 2011 use BETAMAX for tuning the model to your wind data e.g. ECMWF = 1.52; CFRS = 1.34 etc. 
 ZWND    =   10.0000000000000     ,
 ALPHA0  =  9.499999694526196E-003,
 Z0MAX   =  0.000000000000000E+000,
 BETAMAX =   1.54000000000000     ,
 SINTHP  =   2.00000000000000     ,
 ZALP    =  6.000000052154064E-003,
 TAUWSHELTER     =  0.300000011920929     ,
 SWELLFPAR       =   1.00000000000000     ,
 SWELLF  =  0.660000026226044     ,
 SWELLF2 = -1.799999922513962E-002,
 SWELLF3 =  2.199999988079071E-002,
 SWELLF4 =   150000.000000000     ,
 SWELLF5 =   1.20000004768372     ,
 SWELLF6 =  0.000000000000000E+000,
 SWELLF7 =   360000.000000000     ,
 Z0RAT   =  3.999999910593033E-002,
 SINBR   =  0.000000000000000E+000
 /
 &SDS4
 SDSC1   =  0.000000000000000E+000,
 FXPM3   =   4.00000000000000     ,
 FXFM3   =   2.50000000000000     ,
 FXFMAGE =  0.000000000000000E+000,
 SDSC2   = -2.200000017182902E-005,
 SDSCUM  = -0.403439998626709     ,
 SDSSTRAIN       =  0.000000000000000E+000,
 SDSC4   =   1.00000000000000     ,
 SDSC5   =  0.000000000000000E+000,
 SDSC6   =  0.300000011920929     ,
 SDSBR   =  8.999999845400453E-004,
 SDSBR2  =  0.800000011920929     ,
 SDSP    =   2.00000000000000     ,
 SDSISO  =   2.00000000000000     ,
 SDSBCK  =  0.000000000000000E+000,
 SDSABK  =   1.50000000000000     ,
 SDSPBK  =   4.00000000000000     ,
 SDSBINT =  0.300000011920929     ,
 SDSHCK  =   1.50000000000000     ,
 SDSDTH  =   80.0000000000000     ,
 SDSCOS  =   2.00000000000000     ,
 SDSBRF1 =  0.500000000000000     ,
 SDSBRFDF        =  0.000000000000000E+000,
 SDSBM0  =   1.00000000000000     ,
 SDSBM1  =  0.000000000000000E+000,
 SDSBM2  =  0.000000000000000E+000,
 SDSBM3  =  0.000000000000000E+000,
 SDSBM4  =  0.000000000000000E+000,
 SDSHFGEN        =  0.000000000000000E+000,
 SDSLFGEN        =  0.000000000000000E+000,
 WHITECAPWIDTH   =  0.300000011920929     ,
 FXINCUT =  0.000000000000000E+000,
 FXDSCUT =  0.000000000000000E+000
 /


&NUMS
 ICOMP          = 3 
                                     ! This parameter controls the way how the splitting is done and whether implicit or explicit schemes are used for spectral advection
                                     ! ICOMP = 0
                                     ! This means that all dimensions are integrated using explicit methods. Similar
                                     ! to WW3, actually the same schemes are available in WW3 4.1.
                                     ! ICOMP = 1
                                     ! This mean that advection in geographical space is done using implicit
                                     ! Methods, source terms and spectral space are still integrated as done in
                                     ! WW3.
                                     ! ICOMP = 2
                                     ! This means that the advection is done using implicit methods and that the
                                     ! source terms are integrated semi-implicit using Patankar rules and linearized
                                     ! source terms as done in SWAN. Spectral part is still a fractional step

 AMETHOD        = 7 
                                     ! AMETHOD controls the different Methods in geographical space
                                     ! AMETHOD = 0
                                     ! No Advection in geo. Space
                                     ! AMETHOD = 1
                                     ! Explicit N-Scheme for ICOMP = 0 and Implicit N-Scheme for ICOMP > 0
                                     ! AMETHOD = 2
                                     ! PSI-Scheme for ICOMP = 0 and Implicit
                                     ! Crank-Nicholson N-Scheme for ICOMP > 0
                                     ! AMETHOD = 3
                                     ! LFPSI Scheme for ICOMP = 0 and Implicit two time level N2 scheme for ICOMP > 0

                                     ! AMETHOD = 4
                                     ! Like AMETHOD = 1 but using PETSc based on small matrices MNP**2. this can be efficient on small to medium scale cluster up to say 128 Nodes.

                                     ! AMETHOD = 5
                                     ! Like AMETHOD = 1 but using PETSc and assembling the full matrix and the source terms at once (MNP * MDC * MSC)**2. number of equations
                                     ! this is for large scale applications

                                     ! Remark for AMETHOD = 4 and 5. This methods are new and only tested on a few cases where the results look reasonable and do not depend on the number of CPU's which
                                     ! valdiates the correct implementation. The scaling performance is anticipated to be "quite poor" at this time. Mandy different consituents influence the parallel speedup.
                                     ! Please let me know all the information you have in order to improve and accelarate the developement of implicit parallel WWM-III.
                                     ! Have fun ... Aron and Thomas.
ASPAR_LOCAL_LEVEL = 0               ! locality level 0 - a lot of memory 10 - no memory the rest r hybrid levels ... it is try and error stuff depends on architecture

 SMETHOD        = 1 
                                     ! This switch controls the way the source terms are integrated. 0: no source terms;
                                     ! 1: splitting using RK-3 and SI for fast and slow modes 2: semi-implicit;
                                     ! 3: R-K3 (if ICOMP=0 or 1) - slow; 4: Dynamic Splitting (experimental)

 DMETHOD        = 1 
                                     ! This switch controls the numerical method in directional space.
                                     ! DMETHOD = 0
                                     ! No advection in directional space
                                     ! DMETHOD = 1
                                     ! Crank-Nicholson (RTHETA = 0.5) or Euler Implicit scheme (RTHETA = 1.0)
                                     ! DMEHOD = 2
                                     ! Ultimate Quickest as in WW3 (usually best)
                                     ! DMETHOD = 3
                                     ! RK5-WENO
                                     ! DMETHOD = 4
                                     ! Explicit FVM Upwind scheme

 RTHETA         = 0.5                ! Weighing factor for DMETHOD = 1, not really useful since Crank Nicholson integration can only be montotone for CFL .le. 2
 LITERSPLIT     = F                  ! T: double Strang split; F: simple split (more efficienct). Default: F

 LFILTERTH      = F
                                     ! LFILTERTH: use a CFL filter to limit the advection vel. In directional space. This is similar to WW3.
                                     ! Mostly not used. WWMII is always stable.
 MAXCFLTH       = 1.0                ! Max Cfl in Theta space; used only if LFILTERTH=T
 FMETHOD        = 1 
                                     ! This switch controls the numerical method used in freq. space
                                     ! = 0
                                     ! No Advection in spectral space
                                     ! = 1
                                     ! Ultimate Quickest as in WW3 (best)
 LFILTERSIG     = F                  ! Limit the advection velocitiy in freq. space (usually F)
 MAXCFLSIG      = 1.0                ! Max Cfl in freq. space; used only if LFILTERSIG=T
 LSIGBOUND      = F                  ! Theta space on wet land/island boundary
 LTHBOUND       = F                  ! Sigma space on wet land/island boundary
 LSOUBOUND      = F                  ! Source Terms on wet land/island boundary
 MELIM          = 1                  ! Numerical Limiter 
 LIMFAK         = 0.1
 LDIFR          = F                  ! Use phase decoupled diffraction approximation according to Holthuijsen et al. (2003) (usually T; if crash, use F)
 IDIFFR         = 1                  ! Extended WAE account for higher order effects WAE becomes nonlinear; 1: Holthuijsen et al. ; 2: Liau et al. ; 3: Toledo et al. (in preparation)
 LCONV          = F                  ! Estimate convergence criterian and write disk (quasi-steady - qstea.out)
 LCFL           = F                  ! Write out CFL numbers; use F to save time
 NQSITER        = 10                 ! # of quasi-steady (Q-S) sub-divisions within each WWM time step (trial and errors)
 QSCONV1        = 0.98               ! Number of grid points [%/100] that have to fulfill abs. wave height criteria EPSH1
 QSCONV2        = 0.98               ! Number of grid points [%/100] that have to fulfill rel. wave height criteria EPSH2
 QSCONV3        = 0.98               ! Number of grid points [%/100] that have to fulfill sum. rel. wave action criteria EPSH3
 QSCONV4        = 0.98               ! Number of grid points [%/100] that have to fulfill avg. rel. wave period criteria EPSH4
 QSCONV5        = 0.98               ! Number of grid points [%/100] that have to fulfill avg. rel. wave steepness criteria EPSH5
 LEXPIMP        = F                  ! Use implicit schemes for freq. lower than given below by FREQEXP; used only if ICOMP=0
 FREQEXP        = 0.1                ! Minimum frequency for explicit schemes; only used if LEXPIMP=T and ICOMP=0
 EPSH1          = 0.01               ! Convergence criteria for rel. wave height ! EPSH1 < CONVK1 = REAL(ABS(HSOLD(IP)-HS2)/HS2)
 EPSH2          = 0.01               ! Convergence criteria for abs. wave height ! EPSH2 < CONVK2 = REAL(ABS(HS2-HSOLD(IP)))
 EPSH3          = 0.01               ! Convergence criteria for the rel. sum of wave action ! EPSH3 < CONVK3 = REAL(ABS(SUMACOLD(IP)-SUMAC)/SUMAC)
 EPSH4          = 0.01               ! Convergence criteria for the rel. avg. wave steepness criteria ! EPSH4 < CONVK4 = REAL(ABS(KHS2-KHSOLD(IP))/KHSOLD(IP))
 EPSH5          = 0.01               ! Convergence criteria for the rel. avg. waveperiod ! EPSH5 < REAL(ABS(TM02-TM02OLD(IP))/TM02OLD(IP))
 LVECTOR        = F                  ! Use optmized propagation routines for large high performance computers e.g. at least more than 128 CPU. Try LVECTOR=F first.
 IVECTOR        = 2                  ! USed if LVECTOR=T; Different flavours of communications
                                     ! LVECTOR = 1; same propagation style as if LVECTOR = F, this is for testing and development
                                     ! LVECTOR = 2; all spectral bins are propagated with the same time step and communications is done only once per sub-iteration
                                     ! LVECTOR = 3; all directions with the same freq. are propgated using the same time step the communications is done for each freq.
                                     ! LVECTOR = 4; 2 but for mixed open-mpi, code has to be compiled with -openmp
                                     ! LVECTOR = 5; 3 but for mixed open-mpi, code has to be compiled with -openmp
                                     ! LVECTOR = 6; same as 2 but highly optmizied with respect to memory usage, of course it is must less efficient than 2
                                     ! remarks: if you are using this routines be aware that the memory amount that is used is approx. for LVECTOR 1-5 arround
                                     ! 24 * MSC * MDC * MNP, so if you are trying this on 1 CPU you get a segmentation fault if your system has not enough memory or
                                     ! if your system is not properly configured it may results into the fact that your computer starts blocking since it try's to swap to disk
                                     ! The total amount of memoery used per CPU = 24 * MSC * MDC * MNP / No.CPU
 LADVTEST       = F                  ! for testing the advection schemes, testcase will be added soon
 LCHKCONV       = T                  ! needs to set to .true. for quasi-steady mode. in order to compute the QSCONVi criteria and check them
 NB_BLOCK        =           3,
 WAE_SOLVERTHR   =  1.E-6,
 MAXITER =          1000,
 LSOURCESWAM = F
 LNANINFCHK      = F,
 LZETA_SETUP     = F,
 ZETA_METH       =           0,
 PMIN    =   5.,
 BLOCK_GAUSS_SEIDEL = T,
 LNONL   = F,
 L_SOLVER_NORM   = F,
 ASPAR_LOCAL_LEVEL =  0,
/



! output of statistical variables over the whole domain at specified times.
&HISTORY
 BEGTC          = '19980901.000000'  ! Start output time, yyyymmdd. hhmmss;
                                     ! must fit the simulation time otherwise no output.
                                     ! Default is same as PROC%BEGTC
 DELTC          = 1                ! Time step for output; if smaller than simulation time step, the latter is used (output every step for better 1D 2D spectra analysis)
 UNITC          = 'SEC'              ! Unit
 ENDTC          = '19980910.000000'  ! Stop time output, yyyymmdd. hhmmss

                                     ! Default is same as PROC%ENDC
 DEFINETC       = 86400              ! Time for definition of history files
                                     ! If unset or set to a negative value
                                     ! then only one file is generated
                                     ! otherwise, for example for 86400
                                     ! daily output files are created.
 OUTSTYLE       = 'NO'               ! output option - use 'NO' for no output
                                     ! 'NC' for netcdf output
                                     ! 'XFN' for XFN output
                                     ! 'SHP' for DARKO SHP output
 MULTIPLEOUT      = 0                ! 0: output in a single netcdf
                                     !    file with MPI_GATHER being used (default)
                                     ! 1: output in separate netcdf files, each associated with one process
                                     !    and the partition written in the first file
                                     ! 2: output using the parallel netcdf library (NEEDS TO BE DONE)
 USE_SINGLE_OUT  = T                 ! T: Use single precision in the output of model variables (default)
                                     !    This has impact only if rkind=8 is selected
 PARAMWRITE      = T                 ! T/F: Write the physical parametrization and
                                     !      chosen numerical discretization in the
                                     !      netcdf history file (default T)
 GRIDWRITE       = T                  ! T/F: Write the grid in the netcdf history file (default T)
 PRINTMMA       = F                  ! T/F: Print minimum, maximum and average
                                     ! value of statistics during runtime
                                     ! (Default F)
 FILEOUT        = 'history.dat'
 LWXFN          = T
                                     ! Below is selection for all variables. Default is F for all variables.
 HS             = F                  ! significant wave height
 TM01           = F                  ! mean period
 TM02           = F                  ! zero-crossing mean period
 KLM            = F                  ! mean wave number
 WLM            = F                  ! mean wave length
 ETOTC          = F                  ! Variable ETOTC
 ETOTS          = F                  ! Variable ETOTS
 DM             = T                  ! mean wave direction
 DSPR           = F                  ! directional spreading
 TPPD           = F
 TPP            = F
 CPP            = F
 WNPP           = F                  ! peak wave number
 CGPP           = F                  ! peak group speed
 KPP            = F                  ! peak wave number
 LPP            = F                  ! peak
 PEAKD          = F                  ! peak direction
 PEAKDSPR       = F                  ! peak directional spreading
 DPEAK          = F
 UBOT           = F
 ORBITAL        = F
 BOTEXPER       = F
 TMBOT          = F
 URSELL         = F                  ! Ursell number
 UFRIC          = F                  ! air friction velocity
 Z0             = F                  ! air roughness length
 ALPHA_CH       = F                  ! Charnoch coefficient for air
 WINDX          = F                  ! Wind in X direction
 WINDY          = F                  ! Wind in Y direction
 CD             = F                  ! Drag coefficient
 CURRTX         = F                  ! current in X direction
 CURRTY         = F                  ! current in Y direction
 WATLEV         = F                  ! water level
 WATLEVOLD      = F                  ! water level at previous time step
 DEP            = F                  ! depth
 TAUW           = F                  ! surface stress from the wave
 TAUHF          = F                  ! high frequency surface stress
 TAUTOT         = F                  ! total surface stress
 STOKESSURFX    = F                  ! Surface Stokes drift in X direction
 STOKESSURFY    = F                  ! Surface Stokes drift in X direction
 STOKESBAROX    = F                  ! Barotropic Stokes drift in X direction
 STOKESBAROY    = F                  ! Barotropic Stokes drift in Y direction
/

&STATION
 BEGTC          = '19980901.000000'  ! Start simulation time, yyyymmdd. hhmmss; must fit the simulation time otherwise no output
                                     ! Default is same as PROC%BEGTC
 DELTC          =  1,                ! Time step for output; if smaller than simulation time step, the latter is used (output every step for better 1D 2D spectra analysis)
 UNITC          = 'SEC'              ! Unit
 ENDTC          = '20081101.000000'  ! Stop time simulation, yyyymmdd. hhmmss
                                     ! Default is same as PROC%ENDC
 OUTSTYLE       = 'STE'              ! output option - use 'NO' to maximize efficiency during parallel run when using MPI
 FILEOUT        = 'station.dat'
 LOUTITER       = F
 LLOUTS         = F                  ! station output flag
 ILOUTS         = 1                  ! Number of output stations
 NLOUTS         = 'P-1',             ! Name of output locations
 IOUTS          = 1
 NOUTS          = 'P-1',
 XOUTS          = 1950.,             ! X-Coordinate of output locations
 YOUTS          = 304.,            ! Y-Coordinate of output locations
 CUTOFF         = 8*0.44             ! cutoff freq (Hz) for each station - consistent with buoys
 LSP1D          = F                  ! 1D spectral station output
 LSP2D          = F                  ! 2D spectral station output
 LSIGMAX        = T                  ! Adjust the cut-freq. for the output (e.g. consistent with buoy cut-off freq.)
/

&HOTFILE
 LHOTF          = T ! Write hotfile
 BEGTC          = '19980901.000000'   ! Starting time of hotfile writing
 DELTC          = 3600      ! time between hotfile writes
 UNITC          = 'SEC'  ! unit used above
 ENDTC          = '19980901.060000'  ! Ending time of hotfile writing
 LCYCLEHOT      = T ! Applies only to netcdf
                    ! If T then hotfile contains 2 last records.
                    ! If F then hotfile contains N record if N outputs
                    ! have been done
                    ! For binary only one record.
 HOTSTYLE_OUT   = 2  ! 1: binary hotfile of data as output
                     ! 2: netcdf hotfile of data as output (default)
 MULTIPLEOUT    = 0  ! 0: hotfile in a single file (binary or netcdf)
                     !    MPI_REDUCE is then used.
                     ! 1: hotfiles in separate files, each associated
                     !    with one process
 FILEHOT_OUT    = 'hotfile_out_WWM.nc' !name of hot outputs
 HOTSTYLE_IN    = 2  ! 1: binary hotfile of data as input
                     ! 2: netcdf hotfile of data as input (default)
 IHOTPOS_IN        = 1 ! Position in hotfile (only for netcdf)
                       ! for reading. If LCYCLEHOT=T, this can be 1 or 2
 MULTIPLEIN     = 0    ! 0: read hotfile from one single file
                       ! 1: read hotfile from multiple files.
 FILEHOT_IN     = 'hotfile_in_WWM.nc' ! Hot file name for input if LHOTR=T in &INIT. This can be simply hotfile_out.nc above
/

&NESTING
/

! only used with AMETHOD 4 or 5
&PETScOptions
                                     ! Summary of Sparse Linear Solvers Available from PETSc: http://www.mcs.anl.gov/petsc/documentation/linearsolvertable.html
 KSPTYPE       = 'bcgs'
                                     ! This parameter controls which solver is used. This is the same as petsc command line parameter -ksp_type.
                                     ! KSPTYPE = 'GMRES'
                                     ! Implements the Generalized Minimal Residual method. (Saad and Schultz, 1986) with restart
                                     ! KSPTYPE = 'LGMRES'
                                     ! Augments the standard GMRES approximation space with approximations to the error from previous restart cycles.
                                     ! KSPTYPE = 'DGMRES'
                                     ! In this implementation, the adaptive strategy allows to switch to the deflated GMRES when the stagnation occurs.
                                     ! KSPTYPE = 'PGMRES'
                                     ! Implements the Pipelined Generalized Minimal Residual method. Only PETSc 3.3
                                     ! KSPTYPE = 'KSPBCGSL'
                                     ! Implements a slight variant of the Enhanced BiCGStab(L) algorithm

 RTOL          = 1.E-20              ! the relative convergence tolerance (relative decrease in the residual norm)
 ABSTOL        = 1.E-20              ! the absolute convergence tolerance (absolute size of the residual norm)
 DTOL          = 10000.              ! the divergence tolerance
 MAXITS        = 1000                ! maximum number of iterations to use

 INITIALGUESSNONZERO = T             ! Tells the iterative solver that the initial guess is nonzero; otherwise KSP assumes the initial guess is to be zero
 GMRESPREALLOCATE    = T             ! Causes GMRES and FGMRES to preallocate all its needed work vectors at initial setup rather than the default, which is to allocate them in chunks when needed.


 PCTYPE        = 'sor'
                                     ! This parameter controls which  preconditioner is used. This is the same as petsc command line parameter -pc_type
                                     ! PCTYPE = 'SOR'
                                     ! (S)SOR (successive over relaxation, Gauss-Seidel) preconditioning
                                     ! PCTYPE = 'ASM'
                                     ! Use the (restricted) additive Schwarz method, each block is (approximately) solved with its own KSP object.
                                     ! PCTYPE = 'HYPRE'
                                     ! Allows you to use the matrix element based preconditioners in the LLNL package hypre
                                     ! PCTYPE = 'SPAI'
                                     ! Use the Sparse Approximate Inverse method of Grote and Barnard as a preconditioner
                                     ! PCTYPE = 'NONE'
                                     ! This is used when you wish to employ a nonpreconditioned Krylov method.

/
