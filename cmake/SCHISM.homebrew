# CMake presets for compiling on a homebrew (linux/mac) system 
# 
# SPDX-FileCopyrightText: 2024-2025 Helmholtz-Zentrum hereon GmbH
# SPDX-License-Identifier: CC0-1.0
# SPDX-FileContributor: Carsten Lemmen <carsten.lemmen@hereon.de>
# 
# Prerequisites
#   `brew install gfortran cmake make`
#   `CC=clang brew install mpich netcdf netcdf-fortran`
#
# You may also use a different toolchain, e.g. substituting the C compiler
# with `gcc`, the MPI implementation with `open-mpi` or the Fortran 
# compiler with `flang`.  These have not been tested (correct this if you do).
# Homebrew does not (currently) have ParMETIS. 

# Modern homebrew is installed in /opt/homebrew as a prefix, older versions, 
# including those on Intel mac in /usr/local
if(EXISTS "/opt/homebrew")
    set(HOMEBREW_PREFIX "/opt/homebrew")
else()
    set(HOMEBREW_PREFIX "/usr/local")
endif()

# We want to avoid important variables set by other build systems, such as 
# conda, so we mask (only within CMake) these environemnt variables

set(vars_to_check CFLAGS FFLAGS LDFLAGS)
foreach(var ${vars_to_check})
    if(DEFINED ENV{${var}})
        string(FIND "$ENV{${var}}" "envs" match_pos)
        if(NOT match_pos EQUAL -1)
            message(STATUS "Unsetting ${var} (was: $ENV{${var}})")
            set(ENV{${var}} "")
        endif()
    endif()
endforeach()

set(CMAKE_Fortran_COMPILER "${HOMEBREW_PREFIX}/bin/mpifort" CACHE PATH "Path to parallel Fortran compiler")
set(CMAKE_C_COMPILER "${HOMEBREW_PREFIX}/bin/mpicc" CACHE PATH "Path to parallel C compiler")
set(CMAKE_CXX_COMPILER "${HOMEBREW_PREFIX}/bin/mpicxx" CACHE PATH "Path to parallel C++ compiler")
set(NetCDF_ROOT "${HOMEBREW_PREFIX}" CACHE PATH "Path to root of NetCDF library")

# The following should not be here but in the main CMake configuration
set(CMAKE_Fortran_FLAGS "-ffree-line-length-none -fallow-argument-mismatch" CACHE STRING "Fortran flags" FORCE)
set(CMAKE_Fortran_FLAGS_RELEASE "-O2 -ffree-line-length-none -static-libgfortran -finit-local-zero" CACHE STRING "Fortran release flags" FORCE)
