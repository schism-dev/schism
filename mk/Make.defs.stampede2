################################################################################
# Parallel SCHISM Makefile
#
# User makes environment settings for particular OS / PLATFORM / COMPILER / MPI
# below as well as setting flags having to do with included algorithms (e.g. sediment)
# and the compiler configuration (debug, timing). 
#
# The environment settings are based on the following options.
#
# Compiler name:
#   FCS: Serial compiler (for utilities)
#   FCP: Parallel compiler
#   FLD: Linker (in general same as parallel compiler)
#
# Compilation flags
#   FCSFLAGS: Flags for serial compilation
#   FCPFLAGS: Flags for parallel compilation (including all pre-processing flags)
#   FLDFLAGS: Flags for linker (e.g., -O2)
#
# Preprocessor flags:
#   DEBUG: Enable debugging code
#   ORDERED_SUM: Enable globally ordered sums & dot-products for bit reproducibility
#     of state quantities independent of number of processors (note: this can
#     significantly degrade performance);
#   INCLUDE_TIMING: Enable wallclock timing of code (note: this can have slight
#     effect on performance);
#   MPI_VERSION = 1 or 2: Version of MPI (try 2 first, if compile fails due to mpi
#     related errors then switch to version 1;
#
# Libraries (needed for parallel code)
#   MTSLIBS: Flags for linking ParMeTiS/MeTiS libaries
################################################################################

################################################################################
## Environment for TACC/Stampede2 - Knights Landing or Skylake
#################################################################################
ENV = STAMPEDE2

################################################################################
# Alternate executable name if you do not want the default. 
################################################################################
EXEC   := pschism_$(ENV)

################################################################################
# COMPILERS
################################################################################

FCP = mpiifort #MPI compiler
FCS = ifort #serial compiler
FLD = $(FCP)
# MPI vserion (1 or 2)
PPFLAGS := $(PPFLAGS) -DMPIVERSION=2

#Check bound
#FCPFLAGS = $(PPFLAGS) -O1 -CB -unroll-aggressive -g -traceback -mcmodel=medium  -Bstatic -assume byterecl #MPI code
#EXEC := $(EXEC)_CBOUND

#Pure MPI on either type of nodes
#$TACC_VEC_FLAGS=-xCORE-AVX2 -axCORE-AVX512,MIC-AVX512 (on intel/2018 or newer)
#FCPFLAGS = $(PPFLAGS) $TACC_VEC_FLAGS -O2 -assume buffered_io -assume byterecl #MPI code
#FLDFLAGS = $TACC_VEC_FLAGS -O2 -assume buffered_io -assume byterecl #for final linking of object files

#On SKY nodes only
EXEC := $(EXEC)_SKX
FCPFLAGS = $(PPFLAGS) -axCORE-AVX2 -O3 -no-prec-sqrt -no-prec-div -align all -assume buffered_io -assume byterecl #MPI code
FLDFLAGS = -axCORE-AVX2 -O3 -no-prec-sqrt -no-prec-div -align all -assume buffered_io -assume byterecl #for final linking of object files

#####Libraries
##MTSLIBS = -L./ParMetis-3.1-Sep2010.mpiicc -lparmetis -lmetis

CDFLIBS = -Wl,-rpath,${TACC_NETCDF_LIB} -L${TACC_NETCDF_LIB} -lnetcdf -lnetcdff
CDFMOD = -I${TACC_NETCDF_INC} # modules for netcdf

################################################################################
# Algorithm preference flags.
# Comment out unwanted modules and flags.
################################################################################

# -DSCHISM is always on and is defined elsewhere

include ../mk/include_modules

# Don't comment out the follow ifdef
ifdef USE_GOTM
  GTMMOD =  -I/home1/01621/zhangy/selfe/trunk/src/GOTM3.2.5/modules/IFORT #modules
  GTMLIBS = -L/home1/01621/zhangy/selfe/trunk/src/GOTM3.2.5/lib/IFORT -lturbulence_prod -lutil_prod
else
  GTMMOD =
  GTMLIBS =
endif


######### Specialty compiler flags and workarounds
# Add -DNO_TR_15581 like below for allocatable array problem in sflux_subs.F90
# PPFLAGS := $(PPFLAGS) -DNO_TR_15581

# Obsolete flags: use USE_WRAP flag to avoid problems in ParMetis lib (calling C from FORTRAN)
# PPFLAGS := $(PPFLAGS) -DUSE_WRAP 

#Temporary fix for Stampede cluster; leave it on
#  PPFLAGS := $(PPFLAGS) -DSTAMPEDE
